// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // if (zx == 1) set x = 0
    Mux16(a = x, b = false, sel = zx, out = xZx);

    // if (nx == 1) set x = !x
    Not16(in = xZx, out = notXZx);
    Mux16(a = xZx, b = notXZx, sel = nx, out = xZxNx);

    // if (zy == 1) set y = 0 
    Mux16(a = y, b = false, sel = zy, out = yZy);

    // if (ny == 1) set y = !y
    Not16(in = yZy, out = notYZy);
    Mux16(a = yZy, b = notYZy, sel = ny, out = yZyNy);

    // if (f == 1)  set out = x + y ; if (f == 0)  set out = x & y 
    Add16(a = xZxNx, b = yZyNy, out = xPlusY);
    And16(a = xZxNx, b = yZyNy, out = xAndY);
    Mux16(a = xAndY, b = xPlusY, sel = f, out = tempOut);

    // if (no == 1) set out = !out
    Not16(in = tempOut, out = notTempOut);
    // Because of HDL's syntax, we need to "slice" the output here into a few parts we will use later
    // If we try to use subarrays of out later, without declaring them here, we will get an error
    Mux16(a = tempOut, b = notTempOut, sel = no, out[0..7]=part1, out[8..15]=part2, out[15] = signBit, out = out);

    // if (out == 0) set zr = 1
    // We need to check if any of the bits of out are set
    // Since out is 16 bits, we can do two 8-way ORs, then OR together the result
    // This is why we previously split out into part1 and part2
    Or8Way(in = part1, out = first8);
    Or8Way(in = part2, out = last8);
    Or(a = first8, b = last8, out = all8);
    Not(in = all8, out = zr);

    // if (out < 0) set ng = 1
    And(a = true, b = signBit, out = ng);

}