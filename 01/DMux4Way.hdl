// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux4Way.hdl

/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

// There is a more encapsulated approach to this
// using three DMux gates, but the bit-by-bit approach
// is how I'm used to thinking :)

// The 3 gate approach would be:
// DMux(in = in, sel = sel[1], a = t1, b = t2);
// DMux(in = t1, sel = sel[0], a = a, b = b);
// DMux(in = t2, sel = sel[0], a = c, b = d);

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    Or(a = sel[0], b = sel[1], out = notAMask);
    Not(in = notAMask, out = aMask);
    And(a = in, b = aMask, out = a);

    Not(in = sel[1], out = notsel1);
    And(a = sel[0], b = notsel1, out = bMask);
    And(a = in, b = bMask, out = b);

    Not(in = sel[0], out = notsel0);
    And(a = sel[1], b = notsel0, out = cMask);
    And(a = in, b = cMask, out = c);

    And(a = sel[0], b = sel[1], out = dMask);
    And(a = in, b = dMask, out = d);
}